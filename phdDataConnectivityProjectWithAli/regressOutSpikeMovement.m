functin regressOutSpikeMovement(subID)
% this is to add spikemovement regressor to the movement multiple regressor
% generated by another function 'concatenateMontionData.m'. 
%
% *** this must be usde after plotCheckHeadMotionUsingRelignmentData.m
% which produce spikemovement data. the current function need the data.
%
% *** this must be used also after concatenateMotionData.m. it is also better to
% check whether it is necessary to use this function, by looking at
% plotCheckHeadMotionUsingRelignmentData.m output
%
% zhongxu Liu

participantNumber = sprintf('%03d',subID);

rootDir = ['C:\Users\Zhongxu\Documents\myStudy\picpairfMRI\s',...
    participantNumber,'\'];

outputDir = [rootDir,'encoding\','taskRunsConcatenate\'];


fameOrder = checkFameOrder(subID); % get checked fame order from another func

if fameOrder ==0
    error('please check fame order');
end

%spikemovement data directory and file name
spikeDir= [rootDir,'scanImgData\'];
spikeFile=dir([spikeDir,'spikeMovement*.txt']);

if ~isempty(spikeFile)
    
    for k = 1: length(spikeFile)
        
       % find spike movement file for task runs 5 6  and 8 9
        run5 = strncmp(spikeFile(k).name,'spikeMovement_run_0005',22);
        if run5==1,
            fileRun5=textread([spikeDir,spikeFile(k).name]);
        else
            fileRun5=[];
        end;
        
        run6 = strncmp(spikeFile(k).name,'spikeMovement_run_0006',22);
        if run6==1,
            fileRun6=textread([spikeDir,spikeFile(k).name]);
        else
            fileRun6=[];
        end;
        
        run8 = strncmp(spikeFile(k).name,'spikeMovement_run_0008',22);
        if run8==1,
            fileRun8=textread([spikeDir,spikeFile(k).name]);
        else
            fileRun8=[];
        end;
        
        run9 = strncmp(spikeFile(k).name,'spikeMovement_run_0009',22);
        if run9==1,
            fileRun9=textread([spikeDir,spikeFile(k).name]);
        else
            fileRun9=[];
        end;
    end
    
    if mean([run5 run6 run8 run9]) ~=0
        % combining the spikemovement regressor
        ncol = size(fileRun5,2)+size(fileRun6,2)+size(fileRun8,2)+size(fileRun9,2);
        nrow = size(fileRun5,1)*4;
        spikeMatrix = zeros(nrow,ncol);
        if fameOrder ==1
            %for famous-first order, original order run 5 6 and 8 9 is good
            spikeMatrix(1:size(fileRun5,1),1:size(fileRun5,2))=fileRun5;
            
            idr=size(fileRun5,1);
            idc=size(fileRun5,2);
            spikeMatrix(1+idr:idr+size(fileRun6,1),...
                1+idc:idc+size(fileRun6,2))=fileRun6;
            
            idr=size(fileRun5,1)+size(fileRun6,1);
            idc=size(fileRun5,2)+size(fileRun6,2);
            spikeMatrix(1+idr:idr+size(fileRun8,1),...
                1+idc:idc+size(fileRun8,2))=fileRun8;
            
            idr=size(fileRun5,1)+size(fileRun6,1)+size(fileRun8,1);
            idc=size(fileRun5,2)+size(fileRun6,2)+size(fileRun8,2);
            spikeMatrix(1+idr:idr+size(fileRun9,1),...
                1+idc:idc+size(fileRun9,2))=fileRun9;
            
        elseif fameOrder ==2
            %for nonfam-first order, run8 9 should be moved before run 5 6
            spikeMatrix(1:size(fileRun8,1),1:size(fileRun8,2))=fileRun8;
            
            idr=size(fileRun8,1);
            idc=size(fileRun8,2);
            spikeMatrix(1+idr:idr+size(fileRun9,1),...
                1+idc:idc+size(fileRun9,2))=fileRun9;
            
            idr=size(fileRun8,1)+size(fileRun9,1);
            idc=size(fileRun8,2)+size(fileRun9,2);
            spikeMatrix(1+idr:idr+size(fileRun5,1),...
                1+idc:idc+size(fileRun5,2))=fileRun5;
            
            idr=size(fileRun8,1)+size(fileRun9,1)+size(fileRun5,1);
            idc=size(fileRun8,2)+size(fileRun9,2)+size(fileRun5,2);
            spikeMatrix(1+idr:idr+size(fileRun6,1),...
                1+idc:idc+size(fileRun6,2))=fileRun6;  
            
        end %create spikemovement regressors for two fame orders
        
        motionParameter=textread([outputDir,'motionParameter.txt']);
        motionParameter = cat(2,motionParameter,spikeMatrix);
        
        save([outputDir,'motionParameter.txt'],'-ascii', 'motionParameter');
        
               
    end % if task runs have spike movement
    
end %if spikeDir is not empty




